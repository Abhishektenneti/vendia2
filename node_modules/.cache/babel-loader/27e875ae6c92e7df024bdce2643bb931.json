{"ast":null,"code":"// node_modules/.vendia-client/index.ts\nimport debug from \"debug\"; // node_modules/.vendia-client/create-core-client.ts\n\nimport { GraphQLClient } from \"graphql-request\";\n\nvar createCoreClient = (options, _ref) => {\n  let {\n    _logger,\n    _onAuthStateChange\n  } = _ref;\n  const {\n    apiKey,\n    getCredentials,\n    onError\n  } = options;\n\n  if (onError && typeof onError !== \"function\") {\n    throw new Error(\"onError must be a function\");\n  }\n\n  const _errorHandler = onError;\n\n  _logger(\"Initializing @vendia/client...\");\n\n  _logger(`'apiKey' was ${apiKey ? \"\" : \"NOT \"}provided.`);\n\n  const _createGraphQLClient = () => {\n    const opts = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-vendia-sdk\": `@vendia/client@${\"0.4.0\"}`\n      }\n    };\n\n    if (options.apiKey) {\n      opts.headers[\"x-api-key\"] = options.apiKey;\n      opts.headers[\"Authorization\"] = options.apiKey;\n    }\n\n    if (options.fetch) {\n      opts.fetch = options.fetch;\n    }\n\n    return new GraphQLClient(options.apiUrl, opts);\n  };\n\n  const _requestWrapper = async (action, operationName) => {\n    try {\n      const startTime = Date.now();\n      const requestHeaders = {};\n\n      if (typeof getCredentials === \"function\") {\n        const credentials = await getCredentials();\n\n        if (credentials == null ? void 0 : credentials.token) {\n          requestHeaders[\"Authorization\"] = `Bearer ${credentials.token}`;\n        }\n\n        if (credentials.apiKey) {\n          requestHeaders[\"x-api-key\"] = credentials.apiKey;\n          requestHeaders[\"Authorization\"] = credentials.apiKey;\n        }\n\n        _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);\n      }\n\n      const result = await action(requestHeaders);\n\n      _logger(`${operationName} request duration (ms)`, Date.now() - startTime);\n\n      return result;\n    } catch (error) {\n      if (_errorHandler) {\n        _logger(`Passing error to user-provided error handler`);\n\n        _errorHandler(error);\n      }\n\n      return Promise.reject(error);\n    }\n  };\n\n  const _gqlClient = _createGraphQLClient();\n\n  const request = (document, variables, requestHeaders) => {\n    return _requestWrapper(additionalHeaders => {\n      const mergedHeaders = { ...requestHeaders,\n        ...additionalHeaders\n      };\n      return _gqlClient.request(document, variables, mergedHeaders);\n    }, \"request\");\n  };\n\n  return {\n    _gqlClient,\n    _requestWrapper,\n    request\n  };\n}; // node_modules/.vendia-client/create-subscription-client.ts\n\n\nimport { createClient } from \"graphql-ws\";\nimport { v4 as uuid4 } from \"@lukeed/uuid\";\nimport WebSocket from \"isomorphic-ws\";\nimport { print } from \"graphql\";\n\nvar createSubscriptionClient = function (options, _ref2) {\n  let {\n    _logger,\n    _onAuthStateChange\n  } = _ref2;\n  const {\n    apiKey,\n    getCredentials,\n    onError\n  } = options;\n  let subscriptionClient;\n\n  const _createSubscriptionClient = () => {\n    var _a;\n\n    _logger(\"Creating subscription client...\");\n\n    let websocketUrl = (_a = options.websocketUrl) != null ? _a : \"\";\n\n    if (websocketUrl.endsWith(\"/\")) {\n      websocketUrl = websocketUrl.slice(0, -1);\n    }\n\n    const subClientOptions = {\n      url: websocketUrl,\n      webSocketImpl: WebSocket\n    };\n\n    if (typeof getCredentials === \"function\") {\n      subClientOptions.connectionParams = async () => {\n        const credentials = await getCredentials();\n        return { ...credentials\n        };\n      };\n    } else if (apiKey) {\n      subClientOptions.connectionParams = {\n        apiKey\n      };\n    }\n\n    const subClient = createClient(subClientOptions);\n    subClient.on(\"connecting\", () => _logger(\"subscriptionClient connecting...\"));\n    subClient.on(\"connected\", () => _logger(\"subscriptionClient connected!\"));\n    subClient.on(\"closed\", () => _logger(\"subscriptionClient ---disconnected!!!---\"));\n    return subClient;\n  };\n\n  const connectedUnsubscribeMap = /* @__PURE__ */new Map();\n\n  const _subscribe = (_ref3, handler) => {\n    let {\n      query,\n      variables\n    } = _ref3;\n    const queryAsString = print(query);\n\n    _logger(`subscriptionClient creating subscription ${queryAsString}`);\n\n    if (options.websocketUrl === void 0) {\n      throw new Error(\"Please initialize @vendia/client with the websocketUrl option in order to use subscriptions.\");\n    }\n\n    if (subscriptionClient === void 0) {\n      subscriptionClient = _createSubscriptionClient();\n    }\n\n    const unsubscribe = subscriptionClient.subscribe({\n      query: queryAsString,\n      variables\n    }, {\n      next: handler,\n      error: error => {\n        _logger(\"subscriptionClient error:\", JSON.stringify(error, null, 2));\n\n        if (typeof onError === \"function\") {\n          onError(error);\n        }\n      },\n      complete: () => {\n        _logger(\"subscriptionClient complete fired\");\n      }\n    });\n    const observableId = uuid4();\n    connectedUnsubscribeMap.set(observableId, unsubscribe);\n    return createUnsubscribeWrapperFunc(observableId);\n  };\n\n  const createUnsubscribeWrapperFunc = observableId => {\n    return () => {\n      const unsubFunc = connectedUnsubscribeMap.get(observableId);\n\n      if (unsubFunc) {\n        _logger(\"Unsubscribing.\");\n\n        unsubFunc();\n        return;\n      }\n\n      _logger(\"Tried to unsubscribe, but subscription does not exist. This probably means unsubscribe has already been called for this subscription.\");\n    };\n  };\n\n  return {\n    _subscribe\n  };\n}; // node_modules/.vendia-client/generated.ts\n\n\nimport gql from \"graphql-tag\";\nvar Vendia_Block_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {\n  error\n  result {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nvar Vendia_File_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {\n  error\n  result {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nvar Vendia_Folder_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {\n  error\n  result {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\n\nvar _blocks__getDocument = gql`\n    query _blocks__get($id: ID!) {\n  getVendia_Block(id: $id) {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\n\nvar _blocks__listDocument = gql`\n    query _blocks__list($filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_BlockItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    Vendia_BlockItems {\n      _id\n      blockSchemaVersion\n      blockId\n      redactedBlockHash\n      previousBlockId\n      previousRedactedBlockHash\n      blockHash\n      previousBlockHash\n      status\n      commitTime\n      _owner\n      transactions {\n        _id\n        hash\n        redactedHash\n        signature\n        version\n        submissionTime\n        mutations\n        _owner\n      }\n    }\n  }\n}\n    `;\n\nvar _blocks__onAddDocument = gql`\n    subscription _blocks__onAdd {\n  onAddVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\n\nvar _blocks__onRemoveDocument = gql`\n    subscription _blocks__onRemove {\n  onRemoveVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\n\nvar _blocks__onUpdateDocument = gql`\n    subscription _blocks__onUpdate {\n  onUpdateVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\n\nvar _contracts__getDocument = gql`\n    query _contracts__get($id: ID!, $version: Int) {\n  getVendia_Contract(id: $id, version: $version) {\n    ... on Vendia_Contract {\n      description\n      revisionId\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      name\n      outputMutation\n      resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n    }\n    ... on Vendia_Contract_Partial_ {\n      __alias__name: name\n      description\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      __alias__outputMutation: outputMutation\n      __alias__resource: resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n      revisionId\n    }\n  }\n}\n    `;\n\nvar _contracts__listDocument = gql`\n    query _contracts__list($limit: Int, $nextToken: String, $filter: Vendia_Contract_FilterInput_) {\n  listVendia_ContractItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    Vendia_ContractItems {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n    nextToken\n  }\n}\n    `;\n\nvar _contracts__listVersionsDocument = gql`\n    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\n\nvar _contracts__addDocument = gql`\n    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n  }\n}\n    `;\n\nvar _contracts__updateDocument = gql`\n    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_Contract(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n  }\n}\n    `;\n\nvar _contracts__invokeDocument = gql`\n    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {\n  invokeVendia_Contract_async(id: $id, input: $input, revisionId: $revisionId) {\n    error\n    result {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\n\nvar _contracts__removeDocument = gql`\n    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\n\nvar _deployments__getDocument = gql`\n    query _deployments__get($id: ID!) {\n  getVendia_DeploymentInfo(id: $id) {\n    _id\n    deploymentTime\n    consensusDefinitionHash\n    versionTag\n    _owner\n  }\n}\n    `;\n\nvar _deployments__listDocument = gql`\n    query _deployments__list($filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {\n  listVendia_DeploymentInfoItems(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_DeploymentInfoItems {\n      _id\n      deploymentTime\n      consensusDefinitionHash\n      versionTag\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\n\nvar _files__getDocument = gql`\n    query _files__get($id: ID!, $version: Int) {\n  getVendia_File(id: $id, version: $version) {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\n\nvar _files__listDocument = gql`\n    query _files__list($filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FileItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    Vendia_FileItems {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\n\nvar _files__listVersionsDocument = gql`\n    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\n\nvar _files__addDocument = gql`\n    mutation _files__add($input: Vendia_File_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_File(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\n\nvar _files__updateDocument = gql`\n    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_File(\n    id: $id\n    input: $input\n    condition: $condition\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\n\nvar _files__removeDocument = gql`\n    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\n\nvar _files__onAddDocument = gql`\n    subscription _files__onAdd {\n  onAddVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\n\nvar _files__onRemoveDocument = gql`\n    subscription _files__onRemove {\n  onRemoveVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\n\nvar _files__onUpdateDocument = gql`\n    subscription _files__onUpdate {\n  onUpdateVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\n\nvar _folders__getDocument = gql`\n    query _folders__get($id: ID!, $version: Int) {\n  getVendia_Folder(id: $id, version: $version) {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\n\nvar _folders__listDocument = gql`\n    query _folders__list($filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FolderItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    Vendia_FolderItems {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\n\nvar _folders__listVersionsDocument = gql`\n    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\n\nvar _folders__addDocument = gql`\n    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_Folder(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n  }\n}\n    `;\n\nvar _folders__removeDocument = gql`\n    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\n\nvar _folders__onAddDocument = gql`\n    subscription _folders__onAdd {\n  onAddVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\n\nvar _folders__onRemoveDocument = gql`\n    subscription _folders__onRemove {\n  onRemoveVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\n\nvar _folders__onUpdateDocument = gql`\n    subscription _folders__onUpdate {\n  onUpdateVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\n\nvar _settings__getDocument = gql`\n    query _settings__get($version: Int) {\n  getVendia_Settings(version: $version) {\n    blockReportWebhooks\n    blockReportEmails\n    deadLetterWebhooks\n    deadLetterEmails\n    azure {\n      defaultSubscriptionId\n      defaultTenantId\n    }\n    resourceMapKeys\n    resourceMapValues\n    apiSettings {\n      apiKeys {\n        value\n        usagePlan {\n          quotaSettings {\n            limit\n            offset\n            period\n          }\n          throttleSettings {\n            burstLimit\n            rateLimit\n          }\n        }\n      }\n      auth {\n        authorizerType\n        authorizerArn\n        allowedAccounts\n      }\n    }\n    _owner\n    aws {\n      blockReportSQSQueues\n      blockReportLambdas\n      blockReportFirehoses\n      deadLetterSQSQueues\n      deadLetterLambdas\n      s3ReadAccounts\n      dataDogMonitoring {\n        ddExternalId\n        ddApiKey\n        ddLogEndpoint\n        ddSendLogs\n      }\n    }\n  }\n}\n    `;\n\nvar _settings__listVersionsDocument = gql`\n    query _settings__listVersions($limit: Int, $nextToken: String) {\n  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n    nextToken\n  }\n}\n    `;\n\nvar _settings__updateDocument = gql`\n    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      blockReportWebhooks\n      blockReportEmails\n      deadLetterWebhooks\n      deadLetterEmails\n      azure {\n        blockReportFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        blockReportQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        deadLetterFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        deadLetterQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        defaultSubscriptionId\n        defaultTenantId\n      }\n      resourceMapKeys\n      resourceMapValues\n      apiSettings {\n        apiKeys {\n          value\n          usagePlan {\n            quotaSettings {\n              limit\n              offset\n              period\n            }\n            throttleSettings {\n              burstLimit\n              rateLimit\n            }\n          }\n        }\n      }\n      _owner\n      aws {\n        blockReportSQSQueues\n        blockReportLambdas\n        blockReportFirehoses\n        deadLetterSQSQueues\n        deadLetterLambdas\n        s3ReadAccounts\n        dataDogMonitoring {\n          ddExternalId\n          ddApiKey\n          ddLogEndpoint\n          ddSendLogs\n        }\n      }\n    }\n  }\n}\n    `;\n\nvar _uniInfo__getDocument = gql`\n    query _uniInfo__get {\n  getVendia_UniInfo {\n    name\n    sku\n    schema\n    schemaNamespace\n    status\n    createdTime\n    updatedTime\n    localNodeName\n    _owner\n    nodes {\n      name\n      userId\n      userEmail\n      description\n      status\n      csp\n      region\n      bucketName\n      temporaryCredentials {\n        uploadFile {\n          accessKeyId\n          expiration\n          secretAccessKey\n          sessionToken\n        }\n      }\n      tier {\n        share\n      }\n      vendiaAccount {\n        csp\n        accountId\n        userId\n        org\n      }\n    }\n  }\n}\n    `;\n\nvar Motor__getDocument = gql`\n    query Motor__get($id: ID!, $version: Int) {\n  get_Motor(id: $id, version: $version) {\n    _id\n    _owner\n    partNumber\n    serialNumber\n  }\n}\n    `;\nvar Motor__listDocument = gql`\n    query Motor__list($nextToken: String, $limit: Int, $filter: Self_Motor_FilterInput_, $order: [Self_Motor_OrderInput_!]) {\n  list_MotorItems(\n    nextToken: $nextToken\n    limit: $limit\n    filter: $filter\n    order: $order\n    readMode: NODE_LEDGERED\n  ) {\n    _MotorItems {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n    nextToken\n  }\n}\n    `;\nvar Motor__addDocument = gql`\n    mutation Motor__add($input: Self_Motor_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  add_Motor(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__updateDocument = gql`\n    mutation Motor__update($id: ID!, $input: Self_Motor_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Motor_ConditionInput_) {\n  update_Motor(id: $id, input: $input, syncMode: $syncMode, condition: $condition) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__removeDocument = gql`\n    mutation Motor__remove($id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Motor_ConditionInput_) {\n  remove_Motor(id: $id, syncMode: $syncMode, condition: $condition) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n  }\n}\n    `;\nvar Motor__onAddDocument = gql`\n    subscription Motor__onAdd {\n  onAdd_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__onRemoveDocument = gql`\n    subscription Motor__onRemove {\n  onRemove_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__onUpdateDocument = gql`\n    subscription Motor__onUpdate {\n  onUpdate_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\n\nvar defaultWrapper = (action, _operationName) => action();\n\nfunction getEntities(_ref4) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref4;\n  return {\n    motor: {\n      get(id, options) {\n        const variables = { ...options,\n          id\n        };\n        return _requestWrapper(wrappedRequestHeaders => {\n          return _gqlClient.request(Motor__getDocument, variables, wrappedRequestHeaders).then(res => res.get_Motor);\n        }, \"get_Motor\");\n      },\n\n      list(options) {\n        const variables = options;\n        return _requestWrapper(wrappedRequestHeaders => {\n          return _gqlClient.request(Motor__listDocument, variables, wrappedRequestHeaders).then(res => {\n            var _a;\n\n            const updatedRes = { ...res.list_MotorItems,\n              items: (_a = res.list_MotorItems) == null ? void 0 : _a._MotorItems\n            };\n            delete updatedRes._MotorItems;\n            return updatedRes;\n          });\n        }, \"list_MotorItems\");\n      },\n\n      add(input, options) {\n        const variables = { ...options,\n          input\n        };\n        return _requestWrapper(wrappedRequestHeaders => {\n          return _gqlClient.request(Motor__addDocument, variables, wrappedRequestHeaders).then(res => res.add_Motor);\n        }, \"add_Motor\");\n      },\n\n      update(input, options) {\n        const {\n          _id,\n          ...rest\n        } = input;\n        const variables = { ...options,\n          id: _id,\n          input: rest\n        };\n        return _requestWrapper(wrappedRequestHeaders => {\n          return _gqlClient.request(Motor__updateDocument, variables, wrappedRequestHeaders).then(res => res.update_Motor);\n        }, \"update_Motor\");\n      },\n\n      remove(id, options) {\n        const variables = { ...options,\n          id\n        };\n        return _requestWrapper(wrappedRequestHeaders => {\n          return _gqlClient.request(Motor__removeDocument, variables, wrappedRequestHeaders).then(res => res.remove_Motor);\n        }, \"remove_Motor\");\n      },\n\n      onAdd(handler) {\n        return _subscribe({\n          query: Motor__onAddDocument\n        }, _ref5 => {\n          let {\n            data\n          } = _ref5;\n          return handler(data.onAdd_Motor);\n        });\n      },\n\n      onRemove(handler) {\n        return _subscribe({\n          query: Motor__onRemoveDocument\n        }, _ref6 => {\n          let {\n            data\n          } = _ref6;\n          return handler(data.onRemove_Motor);\n        });\n      },\n\n      onUpdate(handler) {\n        return _subscribe({\n          query: Motor__onUpdateDocument\n        }, _ref7 => {\n          let {\n            data\n          } = _ref7;\n          return handler(data.onUpdate_Motor);\n        });\n      }\n\n    }\n  };\n}\n\nfunction getBlocks(_ref8) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref8;\n  return {\n    get(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Block);\n      }, \"getVendia_Block\");\n    },\n\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders).then(res => {\n          var _a;\n\n          const updatedRes = { ...res.listVendia_BlockItems,\n            items: (_a = res.listVendia_BlockItems) == null ? void 0 : _a.Vendia_BlockItems\n          };\n          delete updatedRes.Vendia_BlockItems;\n          return updatedRes;\n        });\n      }, \"listVendia_BlockItems\");\n    },\n\n    onAdd(handler) {\n      return _subscribe({\n        query: _blocks__onAddDocument\n      }, _ref9 => {\n        let {\n          data\n        } = _ref9;\n        return handler(data.onAddVendia_Block);\n      });\n    },\n\n    onRemove(handler) {\n      return _subscribe({\n        query: _blocks__onRemoveDocument\n      }, _ref10 => {\n        let {\n          data\n        } = _ref10;\n        return handler(data.onRemoveVendia_Block);\n      });\n    },\n\n    onUpdate(handler) {\n      return _subscribe({\n        query: _blocks__onUpdateDocument\n      }, _ref11 => {\n        let {\n          data\n        } = _ref11;\n        return handler(data.onUpdateVendia_Block);\n      });\n    }\n\n  };\n}\n\nfunction getContracts(_ref12) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref12;\n  return {\n    get(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Contract);\n      }, \"getVendia_Contract\");\n    },\n\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders).then(res => {\n          var _a;\n\n          const updatedRes = { ...res.listVendia_ContractItems,\n            items: (_a = res.listVendia_ContractItems) == null ? void 0 : _a.Vendia_ContractItems\n          };\n          delete updatedRes.Vendia_ContractItems;\n          return updatedRes;\n        });\n      }, \"listVendia_ContractItems\");\n    },\n\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_ContractVersions);\n      }, \"listVendia_ContractVersions\");\n    },\n\n    add(input, options) {\n      const variables = { ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_Contract);\n      }, \"addVendia_Contract\");\n    },\n\n    update(input, options) {\n      const {\n        _id,\n        ...rest\n      } = input;\n      const variables = { ...options,\n        id: _id,\n        input: rest\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_Contract);\n      }, \"updateVendia_Contract\");\n    },\n\n    invoke(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders).then(res => res.invokeVendia_Contract_async);\n      }, \"invokeVendia_Contract_async\");\n    },\n\n    remove(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_Contract);\n      }, \"removeVendia_Contract\");\n    }\n\n  };\n}\n\nfunction getFiles(_ref13) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref13;\n  return {\n    get(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_File);\n      }, \"getVendia_File\");\n    },\n\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders).then(res => {\n          var _a;\n\n          const updatedRes = { ...res.listVendia_FileItems,\n            items: (_a = res.listVendia_FileItems) == null ? void 0 : _a.Vendia_FileItems\n          };\n          delete updatedRes.Vendia_FileItems;\n          return updatedRes;\n        });\n      }, \"listVendia_FileItems\");\n    },\n\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_FileVersions);\n      }, \"listVendia_FileVersions\");\n    },\n\n    add(input, options) {\n      const variables = { ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_File);\n      }, \"addVendia_File\");\n    },\n\n    update(input, options) {\n      const {\n        _id,\n        ...rest\n      } = input;\n      const variables = { ...options,\n        id: _id,\n        input: rest\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_File);\n      }, \"updateVendia_File\");\n    },\n\n    remove(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_File);\n      }, \"removeVendia_File\");\n    },\n\n    onAdd(handler) {\n      return _subscribe({\n        query: _files__onAddDocument\n      }, _ref14 => {\n        let {\n          data\n        } = _ref14;\n        return handler(data.onAddVendia_File);\n      });\n    },\n\n    onRemove(handler) {\n      return _subscribe({\n        query: _files__onRemoveDocument\n      }, _ref15 => {\n        let {\n          data\n        } = _ref15;\n        return handler(data.onRemoveVendia_File);\n      });\n    },\n\n    onUpdate(handler) {\n      return _subscribe({\n        query: _files__onUpdateDocument\n      }, _ref16 => {\n        let {\n          data\n        } = _ref16;\n        return handler(data.onUpdateVendia_File);\n      });\n    }\n\n  };\n}\n\nfunction getFolders(_ref17) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref17;\n  return {\n    get(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Folder);\n      }, \"getVendia_Folder\");\n    },\n\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders).then(res => {\n          var _a;\n\n          const updatedRes = { ...res.listVendia_FolderItems,\n            items: (_a = res.listVendia_FolderItems) == null ? void 0 : _a.Vendia_FolderItems\n          };\n          delete updatedRes.Vendia_FolderItems;\n          return updatedRes;\n        });\n      }, \"listVendia_FolderItems\");\n    },\n\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_FolderVersions);\n      }, \"listVendia_FolderVersions\");\n    },\n\n    add(input, options) {\n      const variables = { ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders).then(res => res.addVendia_Folder);\n      }, \"addVendia_Folder\");\n    },\n\n    remove(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders).then(res => res.removeVendia_Folder);\n      }, \"removeVendia_Folder\");\n    },\n\n    onAdd(handler) {\n      return _subscribe({\n        query: _folders__onAddDocument\n      }, _ref18 => {\n        let {\n          data\n        } = _ref18;\n        return handler(data.onAddVendia_Folder);\n      });\n    },\n\n    onRemove(handler) {\n      return _subscribe({\n        query: _folders__onRemoveDocument\n      }, _ref19 => {\n        let {\n          data\n        } = _ref19;\n        return handler(data.onRemoveVendia_Folder);\n      });\n    },\n\n    onUpdate(handler) {\n      return _subscribe({\n        query: _folders__onUpdateDocument\n      }, _ref20 => {\n        let {\n          data\n        } = _ref20;\n        return handler(data.onUpdateVendia_Folder);\n      });\n    }\n\n  };\n}\n\nfunction getDeployments(_ref21) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref21;\n  return {\n    get(id, options) {\n      const variables = { ...options,\n        id\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_DeploymentInfo);\n      }, \"getVendia_DeploymentInfo\");\n    },\n\n    list(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders).then(res => {\n          var _a;\n\n          const updatedRes = { ...res.listVendia_DeploymentInfoItems,\n            items: (_a = res.listVendia_DeploymentInfoItems) == null ? void 0 : _a.Vendia_DeploymentInfoItems\n          };\n          delete updatedRes.Vendia_DeploymentInfoItems;\n          return updatedRes;\n        });\n      }, \"listVendia_DeploymentInfoItems\");\n    }\n\n  };\n}\n\nfunction getSettings(_ref22) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref22;\n  return {\n    get(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_Settings);\n      }, \"getVendia_Settings\");\n    },\n\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders).then(res => res.listVendia_SettingsVersions);\n      }, \"listVendia_SettingsVersions\");\n    },\n\n    update(input, options) {\n      const variables = { ...options,\n        input\n      };\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders).then(res => res.updateVendia_Settings);\n      }, \"updateVendia_Settings\");\n    }\n\n  };\n}\n\nfunction getUniInfo(_ref23) {\n  let {\n    _gqlClient,\n    _subscribe,\n    _requestWrapper = defaultWrapper\n  } = _ref23;\n  return {\n    get() {\n      const variables = {};\n      return _requestWrapper(wrappedRequestHeaders => {\n        return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders).then(res => res.getVendia_UniInfo);\n      }, \"getVendia_UniInfo\");\n    }\n\n  };\n} // node_modules/.vendia-client/index.ts\n\n\nvar createVendiaClient = options => {\n  const _logger = debug(\"@vendia/client\");\n\n  if (options.debug) {\n    _logger(\"Debug enabled via options\");\n\n    debug.enable(\"@vendia/client\");\n  }\n\n  const {\n    _subscribe\n  } = createSubscriptionClient(options, {\n    _logger\n  });\n  const {\n    _gqlClient,\n    _requestWrapper,\n    request\n  } = createCoreClient(options, {\n    _logger\n  });\n  const getSdkOptions = {\n    _gqlClient,\n    _requestWrapper,\n    _subscribe\n  };\n  const blocks = getBlocks(getSdkOptions);\n  const contracts = getContracts(getSdkOptions);\n  const deployments = getDeployments(getSdkOptions);\n  const entities = getEntities(getSdkOptions);\n  const uniInfo = getUniInfo(getSdkOptions);\n  const settings = getSettings(getSdkOptions);\n  const folders = getFolders(getSdkOptions);\n  const files = getFiles(getSdkOptions);\n  const storage = {\n    files,\n    folders\n  };\n  return {\n    request,\n    deployments,\n    blocks,\n    storage,\n    contracts,\n    uniInfo,\n    settings,\n    entities\n  };\n};\n\nexport { createVendiaClient };","map":{"version":3,"names":["debug","GraphQLClient","createCoreClient","options","_logger","_onAuthStateChange","apiKey","getCredentials","onError","Error","_errorHandler","_createGraphQLClient","opts","headers","fetch","apiUrl","_requestWrapper","action","operationName","startTime","Date","now","requestHeaders","credentials","token","result","error","Promise","reject","_gqlClient","request","document","variables","additionalHeaders","mergedHeaders","createClient","v4","uuid4","WebSocket","print","createSubscriptionClient","subscriptionClient","_createSubscriptionClient","_a","websocketUrl","endsWith","slice","subClientOptions","url","webSocketImpl","connectionParams","subClient","on","connectedUnsubscribeMap","Map","_subscribe","handler","query","queryAsString","unsubscribe","subscribe","next","JSON","stringify","complete","observableId","set","createUnsubscribeWrapperFunc","unsubFunc","get","gql","Vendia_Block_Result_FragmentFragmentDoc","Vendia_File_Result_FragmentFragmentDoc","Vendia_Folder_Result_FragmentFragmentDoc","_blocks__getDocument","_blocks__listDocument","_blocks__onAddDocument","_blocks__onRemoveDocument","_blocks__onUpdateDocument","_contracts__getDocument","_contracts__listDocument","_contracts__listVersionsDocument","_contracts__addDocument","_contracts__updateDocument","_contracts__invokeDocument","_contracts__removeDocument","_deployments__getDocument","_deployments__listDocument","_files__getDocument","_files__listDocument","_files__listVersionsDocument","_files__addDocument","_files__updateDocument","_files__removeDocument","_files__onAddDocument","_files__onRemoveDocument","_files__onUpdateDocument","_folders__getDocument","_folders__listDocument","_folders__listVersionsDocument","_folders__addDocument","_folders__removeDocument","_folders__onAddDocument","_folders__onRemoveDocument","_folders__onUpdateDocument","_settings__getDocument","_settings__listVersionsDocument","_settings__updateDocument","_uniInfo__getDocument","Motor__getDocument","Motor__listDocument","Motor__addDocument","Motor__updateDocument","Motor__removeDocument","Motor__onAddDocument","Motor__onRemoveDocument","Motor__onUpdateDocument","defaultWrapper","_operationName","getEntities","motor","id","wrappedRequestHeaders","then","res","get_Motor","list","updatedRes","list_MotorItems","items","_MotorItems","add","input","add_Motor","update","_id","rest","update_Motor","remove","remove_Motor","onAdd","data","onAdd_Motor","onRemove","onRemove_Motor","onUpdate","onUpdate_Motor","getBlocks","getVendia_Block","listVendia_BlockItems","Vendia_BlockItems","onAddVendia_Block","onRemoveVendia_Block","onUpdateVendia_Block","getContracts","getVendia_Contract","listVendia_ContractItems","Vendia_ContractItems","listVersions","listVendia_ContractVersions","addVendia_Contract","updateVendia_Contract","invoke","invokeVendia_Contract_async","removeVendia_Contract","getFiles","getVendia_File","listVendia_FileItems","Vendia_FileItems","listVendia_FileVersions","addVendia_File","updateVendia_File","removeVendia_File","onAddVendia_File","onRemoveVendia_File","onUpdateVendia_File","getFolders","getVendia_Folder","listVendia_FolderItems","Vendia_FolderItems","listVendia_FolderVersions","addVendia_Folder","removeVendia_Folder","onAddVendia_Folder","onRemoveVendia_Folder","onUpdateVendia_Folder","getDeployments","getVendia_DeploymentInfo","listVendia_DeploymentInfoItems","Vendia_DeploymentInfoItems","getSettings","getVendia_Settings","listVendia_SettingsVersions","updateVendia_Settings","getUniInfo","getVendia_UniInfo","createVendiaClient","enable","getSdkOptions","blocks","contracts","deployments","entities","uniInfo","settings","folders","files","storage"],"sources":["/Users/abhishektenneti/CDrive/234 project/vendia2/node_modules/.vendia-client/esm/index.js"],"sourcesContent":["// node_modules/.vendia-client/index.ts\nimport debug from \"debug\";\n\n// node_modules/.vendia-client/create-core-client.ts\nimport { GraphQLClient } from \"graphql-request\";\nvar createCoreClient = (options, {\n  _logger,\n  _onAuthStateChange\n}) => {\n  const { apiKey, getCredentials, onError } = options;\n  if (onError && typeof onError !== \"function\") {\n    throw new Error(\"onError must be a function\");\n  }\n  const _errorHandler = onError;\n  _logger(\"Initializing @vendia/client...\");\n  _logger(`'apiKey' was ${apiKey ? \"\" : \"NOT \"}provided.`);\n  const _createGraphQLClient = () => {\n    const opts = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-vendia-sdk\": `@vendia/client@${\"0.4.0\"}`\n      }\n    };\n    if (options.apiKey) {\n      opts.headers[\"x-api-key\"] = options.apiKey;\n      opts.headers[\"Authorization\"] = options.apiKey;\n    }\n    if (options.fetch) {\n      opts.fetch = options.fetch;\n    }\n    return new GraphQLClient(options.apiUrl, opts);\n  };\n  const _requestWrapper = async (action, operationName) => {\n    try {\n      const startTime = Date.now();\n      const requestHeaders = {};\n      if (typeof getCredentials === \"function\") {\n        const credentials = await getCredentials();\n        if (credentials == null ? void 0 : credentials.token) {\n          requestHeaders[\"Authorization\"] = `Bearer ${credentials.token}`;\n        }\n        if (credentials.apiKey) {\n          requestHeaders[\"x-api-key\"] = credentials.apiKey;\n          requestHeaders[\"Authorization\"] = credentials.apiKey;\n        }\n        _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);\n      }\n      const result = await action(requestHeaders);\n      _logger(`${operationName} request duration (ms)`, Date.now() - startTime);\n      return result;\n    } catch (error) {\n      if (_errorHandler) {\n        _logger(`Passing error to user-provided error handler`);\n        _errorHandler(error);\n      }\n      return Promise.reject(error);\n    }\n  };\n  const _gqlClient = _createGraphQLClient();\n  const request = (document, variables, requestHeaders) => {\n    return _requestWrapper((additionalHeaders) => {\n      const mergedHeaders = { ...requestHeaders, ...additionalHeaders };\n      return _gqlClient.request(document, variables, mergedHeaders);\n    }, \"request\");\n  };\n  return {\n    _gqlClient,\n    _requestWrapper,\n    request\n  };\n};\n\n// node_modules/.vendia-client/create-subscription-client.ts\nimport { createClient } from \"graphql-ws\";\nimport { v4 as uuid4 } from \"@lukeed/uuid\";\nimport WebSocket from \"isomorphic-ws\";\nimport { print } from \"graphql\";\nvar createSubscriptionClient = function(options, {\n  _logger,\n  _onAuthStateChange\n}) {\n  const { apiKey, getCredentials, onError } = options;\n  let subscriptionClient;\n  const _createSubscriptionClient = () => {\n    var _a;\n    _logger(\"Creating subscription client...\");\n    let websocketUrl = (_a = options.websocketUrl) != null ? _a : \"\";\n    if (websocketUrl.endsWith(\"/\")) {\n      websocketUrl = websocketUrl.slice(0, -1);\n    }\n    const subClientOptions = {\n      url: websocketUrl,\n      webSocketImpl: WebSocket\n    };\n    if (typeof getCredentials === \"function\") {\n      subClientOptions.connectionParams = async () => {\n        const credentials = await getCredentials();\n        return {\n          ...credentials\n        };\n      };\n    } else if (apiKey) {\n      subClientOptions.connectionParams = { apiKey };\n    }\n    const subClient = createClient(subClientOptions);\n    subClient.on(\"connecting\", () => _logger(\"subscriptionClient connecting...\"));\n    subClient.on(\"connected\", () => _logger(\"subscriptionClient connected!\"));\n    subClient.on(\"closed\", () => _logger(\"subscriptionClient ---disconnected!!!---\"));\n    return subClient;\n  };\n  const connectedUnsubscribeMap = /* @__PURE__ */ new Map();\n  const _subscribe = ({ query, variables }, handler) => {\n    const queryAsString = print(query);\n    _logger(`subscriptionClient creating subscription ${queryAsString}`);\n    if (options.websocketUrl === void 0) {\n      throw new Error(\"Please initialize @vendia/client with the websocketUrl option in order to use subscriptions.\");\n    }\n    if (subscriptionClient === void 0) {\n      subscriptionClient = _createSubscriptionClient();\n    }\n    const unsubscribe = subscriptionClient.subscribe(\n      { query: queryAsString, variables },\n      {\n        next: handler,\n        error: (error) => {\n          _logger(\"subscriptionClient error:\", JSON.stringify(error, null, 2));\n          if (typeof onError === \"function\") {\n            onError(error);\n          }\n        },\n        complete: () => {\n          _logger(\"subscriptionClient complete fired\");\n        }\n      }\n    );\n    const observableId = uuid4();\n    connectedUnsubscribeMap.set(observableId, unsubscribe);\n    return createUnsubscribeWrapperFunc(observableId);\n  };\n  const createUnsubscribeWrapperFunc = (observableId) => {\n    return () => {\n      const unsubFunc = connectedUnsubscribeMap.get(observableId);\n      if (unsubFunc) {\n        _logger(\"Unsubscribing.\");\n        unsubFunc();\n        return;\n      }\n      _logger(\n        \"Tried to unsubscribe, but subscription does not exist. This probably means unsubscribe has already been called for this subscription.\"\n      );\n    };\n  };\n  return {\n    _subscribe\n  };\n};\n\n// node_modules/.vendia-client/generated.ts\nimport gql from \"graphql-tag\";\nvar Vendia_Block_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {\n  error\n  result {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nvar Vendia_File_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {\n  error\n  result {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nvar Vendia_Folder_Result_FragmentFragmentDoc = gql`\n    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {\n  error\n  result {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nvar _blocks__getDocument = gql`\n    query _blocks__get($id: ID!) {\n  getVendia_Block(id: $id) {\n    _id\n    blockSchemaVersion\n    blockId\n    redactedBlockHash\n    previousBlockId\n    previousRedactedBlockHash\n    blockHash\n    previousBlockHash\n    status\n    commitTime\n    _owner\n    transactions {\n      _id\n      hash\n      redactedHash\n      signature\n      version\n      submissionTime\n      mutations\n      _owner\n    }\n  }\n}\n    `;\nvar _blocks__listDocument = gql`\n    query _blocks__list($filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_BlockItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    Vendia_BlockItems {\n      _id\n      blockSchemaVersion\n      blockId\n      redactedBlockHash\n      previousBlockId\n      previousRedactedBlockHash\n      blockHash\n      previousBlockHash\n      status\n      commitTime\n      _owner\n      transactions {\n        _id\n        hash\n        redactedHash\n        signature\n        version\n        submissionTime\n        mutations\n        _owner\n      }\n    }\n  }\n}\n    `;\nvar _blocks__onAddDocument = gql`\n    subscription _blocks__onAdd {\n  onAddVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\nvar _blocks__onRemoveDocument = gql`\n    subscription _blocks__onRemove {\n  onRemoveVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\nvar _blocks__onUpdateDocument = gql`\n    subscription _blocks__onUpdate {\n  onUpdateVendia_Block {\n    ...Vendia_Block_Result_Fragment\n  }\n}\n    ${Vendia_Block_Result_FragmentFragmentDoc}`;\nvar _contracts__getDocument = gql`\n    query _contracts__get($id: ID!, $version: Int) {\n  getVendia_Contract(id: $id, version: $version) {\n    ... on Vendia_Contract {\n      description\n      revisionId\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      name\n      outputMutation\n      resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n    }\n    ... on Vendia_Contract_Partial_ {\n      __alias__name: name\n      description\n      _acl {\n        path\n        operations\n        principal {\n          nodes\n        }\n      }\n      _id\n      _owner\n      inputQuery\n      __alias__outputMutation: outputMutation\n      __alias__resource: resource {\n        uri\n        csp\n        metadata {\n          name\n          value\n        }\n      }\n      revisionId\n    }\n  }\n}\n    `;\nvar _contracts__listDocument = gql`\n    query _contracts__list($limit: Int, $nextToken: String, $filter: Vendia_Contract_FilterInput_) {\n  listVendia_ContractItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    Vendia_ContractItems {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n    nextToken\n  }\n}\n    `;\nvar _contracts__listVersionsDocument = gql`\n    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nvar _contracts__addDocument = gql`\n    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n  }\n}\n    `;\nvar _contracts__updateDocument = gql`\n    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_Contract(\n    input: $input\n    aclInput: $aclInput\n    condition: $condition\n    id: $id\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      ... on Vendia_Contract {\n        description\n        revisionId\n        _acl {\n          operations\n          path\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        name\n        outputMutation\n        resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n      }\n      ... on Vendia_Contract_Partial_ {\n        __alias__name: name\n        description\n        _acl {\n          path\n          operations\n          principal {\n            nodes\n          }\n        }\n        _id\n        _owner\n        inputQuery\n        __alias__outputMutation: outputMutation\n        __alias__resource: resource {\n          uri\n          csp\n          metadata {\n            name\n            value\n          }\n        }\n        revisionId\n      }\n    }\n  }\n}\n    `;\nvar _contracts__invokeDocument = gql`\n    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {\n  invokeVendia_Contract_async(id: $id, input: $input, revisionId: $revisionId) {\n    error\n    result {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nvar _contracts__removeDocument = gql`\n    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nvar _deployments__getDocument = gql`\n    query _deployments__get($id: ID!) {\n  getVendia_DeploymentInfo(id: $id) {\n    _id\n    deploymentTime\n    consensusDefinitionHash\n    versionTag\n    _owner\n  }\n}\n    `;\nvar _deployments__listDocument = gql`\n    query _deployments__list($filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {\n  listVendia_DeploymentInfoItems(\n    filter: $filter\n    limit: $limit\n    nextToken: $nextToken\n  ) {\n    Vendia_DeploymentInfoItems {\n      _id\n      deploymentTime\n      consensusDefinitionHash\n      versionTag\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nvar _files__getDocument = gql`\n    query _files__get($id: ID!, $version: Int) {\n  getVendia_File(id: $id, version: $version) {\n    _id\n    sourceBucket\n    sourceKey\n    sourceRegion\n    sourceVersion\n    destinationKey\n    copyStrategy\n    read\n    write\n    etag\n    createdTime\n    updatedTime\n    temporaryUrl\n    fileVersion\n    _owner\n  }\n}\n    `;\nvar _files__listDocument = gql`\n    query _files__list($filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FileItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    Vendia_FileItems {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nvar _files__listVersionsDocument = gql`\n    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nvar _files__addDocument = gql`\n    mutation _files__add($input: Vendia_File_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_File(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nvar _files__updateDocument = gql`\n    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_File(\n    id: $id\n    input: $input\n    condition: $condition\n    syncMode: $syncMode\n  ) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      sourceBucket\n      sourceKey\n      sourceRegion\n      sourceVersion\n      destinationKey\n      copyStrategy\n      read\n      write\n      etag\n      createdTime\n      updatedTime\n      temporaryUrl\n      fileVersion\n      _owner\n    }\n  }\n}\n    `;\nvar _files__removeDocument = gql`\n    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nvar _files__onAddDocument = gql`\n    subscription _files__onAdd {\n  onAddVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nvar _files__onRemoveDocument = gql`\n    subscription _files__onRemove {\n  onRemoveVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nvar _files__onUpdateDocument = gql`\n    subscription _files__onUpdate {\n  onUpdateVendia_File {\n    ...Vendia_File_Result_Fragment\n  }\n}\n    ${Vendia_File_Result_FragmentFragmentDoc}`;\nvar _folders__getDocument = gql`\n    query _folders__get($id: ID!, $version: Int) {\n  getVendia_Folder(id: $id, version: $version) {\n    _id\n    name\n    parent\n    read\n    write\n    copyStrategy\n    createdTime\n    updatedTime\n    _owner\n  }\n}\n    `;\nvar _folders__listDocument = gql`\n    query _folders__list($filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {\n  listVendia_FolderItems(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    Vendia_FolderItems {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n    nextToken\n  }\n}\n    `;\nvar _folders__listVersionsDocument = gql`\n    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {\n  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {\n    nextToken\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n  }\n}\n    `;\nvar _folders__addDocument = gql`\n    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  addVendia_Folder(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      _id\n      name\n      parent\n      read\n      write\n      copyStrategy\n      createdTime\n      updatedTime\n      _owner\n    }\n  }\n}\n    `;\nvar _folders__removeDocument = gql`\n    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n  }\n}\n    `;\nvar _folders__onAddDocument = gql`\n    subscription _folders__onAdd {\n  onAddVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nvar _folders__onRemoveDocument = gql`\n    subscription _folders__onRemove {\n  onRemoveVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nvar _folders__onUpdateDocument = gql`\n    subscription _folders__onUpdate {\n  onUpdateVendia_Folder {\n    ...Vendia_Folder_Result_Fragment\n  }\n}\n    ${Vendia_Folder_Result_FragmentFragmentDoc}`;\nvar _settings__getDocument = gql`\n    query _settings__get($version: Int) {\n  getVendia_Settings(version: $version) {\n    blockReportWebhooks\n    blockReportEmails\n    deadLetterWebhooks\n    deadLetterEmails\n    azure {\n      defaultSubscriptionId\n      defaultTenantId\n    }\n    resourceMapKeys\n    resourceMapValues\n    apiSettings {\n      apiKeys {\n        value\n        usagePlan {\n          quotaSettings {\n            limit\n            offset\n            period\n          }\n          throttleSettings {\n            burstLimit\n            rateLimit\n          }\n        }\n      }\n      auth {\n        authorizerType\n        authorizerArn\n        allowedAccounts\n      }\n    }\n    _owner\n    aws {\n      blockReportSQSQueues\n      blockReportLambdas\n      blockReportFirehoses\n      deadLetterSQSQueues\n      deadLetterLambdas\n      s3ReadAccounts\n      dataDogMonitoring {\n        ddExternalId\n        ddApiKey\n        ddLogEndpoint\n        ddSendLogs\n      }\n    }\n  }\n}\n    `;\nvar _settings__listVersionsDocument = gql`\n    query _settings__listVersions($limit: Int, $nextToken: String) {\n  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {\n    versions {\n      ordinal\n      block\n      transactions {\n        _id\n        _owner\n        submissionTime\n      }\n    }\n    nextToken\n  }\n}\n    `;\nvar _settings__updateDocument = gql`\n    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      transactionId\n      version\n      submissionTime\n      _owner\n    }\n    result {\n      blockReportWebhooks\n      blockReportEmails\n      deadLetterWebhooks\n      deadLetterEmails\n      azure {\n        blockReportFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        blockReportQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        deadLetterFunctions {\n          resourceGroupName\n          functionAppName\n          functionName\n        }\n        deadLetterQueues {\n          resourceGroupName\n          storageAccountName\n          queueName\n        }\n        defaultSubscriptionId\n        defaultTenantId\n      }\n      resourceMapKeys\n      resourceMapValues\n      apiSettings {\n        apiKeys {\n          value\n          usagePlan {\n            quotaSettings {\n              limit\n              offset\n              period\n            }\n            throttleSettings {\n              burstLimit\n              rateLimit\n            }\n          }\n        }\n      }\n      _owner\n      aws {\n        blockReportSQSQueues\n        blockReportLambdas\n        blockReportFirehoses\n        deadLetterSQSQueues\n        deadLetterLambdas\n        s3ReadAccounts\n        dataDogMonitoring {\n          ddExternalId\n          ddApiKey\n          ddLogEndpoint\n          ddSendLogs\n        }\n      }\n    }\n  }\n}\n    `;\nvar _uniInfo__getDocument = gql`\n    query _uniInfo__get {\n  getVendia_UniInfo {\n    name\n    sku\n    schema\n    schemaNamespace\n    status\n    createdTime\n    updatedTime\n    localNodeName\n    _owner\n    nodes {\n      name\n      userId\n      userEmail\n      description\n      status\n      csp\n      region\n      bucketName\n      temporaryCredentials {\n        uploadFile {\n          accessKeyId\n          expiration\n          secretAccessKey\n          sessionToken\n        }\n      }\n      tier {\n        share\n      }\n      vendiaAccount {\n        csp\n        accountId\n        userId\n        org\n      }\n    }\n  }\n}\n    `;\nvar Motor__getDocument = gql`\n    query Motor__get($id: ID!, $version: Int) {\n  get_Motor(id: $id, version: $version) {\n    _id\n    _owner\n    partNumber\n    serialNumber\n  }\n}\n    `;\nvar Motor__listDocument = gql`\n    query Motor__list($nextToken: String, $limit: Int, $filter: Self_Motor_FilterInput_, $order: [Self_Motor_OrderInput_!]) {\n  list_MotorItems(\n    nextToken: $nextToken\n    limit: $limit\n    filter: $filter\n    order: $order\n    readMode: NODE_LEDGERED\n  ) {\n    _MotorItems {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n    nextToken\n  }\n}\n    `;\nvar Motor__addDocument = gql`\n    mutation Motor__add($input: Self_Motor_Input_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED) {\n  add_Motor(input: $input, syncMode: $syncMode) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__updateDocument = gql`\n    mutation Motor__update($id: ID!, $input: Self_Motor_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Motor_ConditionInput_) {\n  update_Motor(id: $id, input: $input, syncMode: $syncMode, condition: $condition) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__removeDocument = gql`\n    mutation Motor__remove($id: ID!, $syncMode: Vendia_SyncMode = NODE_LEDGERED, $condition: Self_Motor_ConditionInput_) {\n  remove_Motor(id: $id, syncMode: $syncMode, condition: $condition) {\n    transaction {\n      _id\n      _owner\n      transactionId\n      submissionTime\n      version\n    }\n  }\n}\n    `;\nvar Motor__onAddDocument = gql`\n    subscription Motor__onAdd {\n  onAdd_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__onRemoveDocument = gql`\n    subscription Motor__onRemove {\n  onRemove_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar Motor__onUpdateDocument = gql`\n    subscription Motor__onUpdate {\n  onUpdate_Motor {\n    error\n    result {\n      _id\n      _owner\n      partNumber\n      serialNumber\n    }\n  }\n}\n    `;\nvar defaultWrapper = (action, _operationName) => action();\nfunction getEntities({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    motor: {\n      get(id, options) {\n        const variables = { ...options, id };\n        return _requestWrapper((wrappedRequestHeaders) => {\n          return _gqlClient.request(Motor__getDocument, variables, wrappedRequestHeaders).then((res) => res.get_Motor);\n        }, \"get_Motor\");\n      },\n      list(options) {\n        const variables = options;\n        return _requestWrapper((wrappedRequestHeaders) => {\n          return _gqlClient.request(Motor__listDocument, variables, wrappedRequestHeaders).then((res) => {\n            var _a;\n            const updatedRes = { ...res.list_MotorItems, items: (_a = res.list_MotorItems) == null ? void 0 : _a._MotorItems };\n            delete updatedRes._MotorItems;\n            return updatedRes;\n          });\n        }, \"list_MotorItems\");\n      },\n      add(input, options) {\n        const variables = { ...options, input };\n        return _requestWrapper((wrappedRequestHeaders) => {\n          return _gqlClient.request(Motor__addDocument, variables, wrappedRequestHeaders).then((res) => res.add_Motor);\n        }, \"add_Motor\");\n      },\n      update(input, options) {\n        const { _id, ...rest } = input;\n        const variables = { ...options, id: _id, input: rest };\n        return _requestWrapper((wrappedRequestHeaders) => {\n          return _gqlClient.request(Motor__updateDocument, variables, wrappedRequestHeaders).then((res) => res.update_Motor);\n        }, \"update_Motor\");\n      },\n      remove(id, options) {\n        const variables = { ...options, id };\n        return _requestWrapper((wrappedRequestHeaders) => {\n          return _gqlClient.request(Motor__removeDocument, variables, wrappedRequestHeaders).then((res) => res.remove_Motor);\n        }, \"remove_Motor\");\n      },\n      onAdd(handler) {\n        return _subscribe({ query: Motor__onAddDocument }, ({ data }) => {\n          return handler(data.onAdd_Motor);\n        });\n      },\n      onRemove(handler) {\n        return _subscribe({ query: Motor__onRemoveDocument }, ({ data }) => {\n          return handler(data.onRemove_Motor);\n        });\n      },\n      onUpdate(handler) {\n        return _subscribe({ query: Motor__onUpdateDocument }, ({ data }) => {\n          return handler(data.onUpdate_Motor);\n        });\n      }\n    }\n  };\n}\nfunction getBlocks({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Block);\n      }, \"getVendia_Block\");\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders).then((res) => {\n          var _a;\n          const updatedRes = { ...res.listVendia_BlockItems, items: (_a = res.listVendia_BlockItems) == null ? void 0 : _a.Vendia_BlockItems };\n          delete updatedRes.Vendia_BlockItems;\n          return updatedRes;\n        });\n      }, \"listVendia_BlockItems\");\n    },\n    onAdd(handler) {\n      return _subscribe({ query: _blocks__onAddDocument }, ({ data }) => {\n        return handler(data.onAddVendia_Block);\n      });\n    },\n    onRemove(handler) {\n      return _subscribe({ query: _blocks__onRemoveDocument }, ({ data }) => {\n        return handler(data.onRemoveVendia_Block);\n      });\n    },\n    onUpdate(handler) {\n      return _subscribe({ query: _blocks__onUpdateDocument }, ({ data }) => {\n        return handler(data.onUpdateVendia_Block);\n      });\n    }\n  };\n}\nfunction getContracts({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Contract);\n      }, \"getVendia_Contract\");\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders).then((res) => {\n          var _a;\n          const updatedRes = { ...res.listVendia_ContractItems, items: (_a = res.listVendia_ContractItems) == null ? void 0 : _a.Vendia_ContractItems };\n          delete updatedRes.Vendia_ContractItems;\n          return updatedRes;\n        });\n      }, \"listVendia_ContractItems\");\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_ContractVersions);\n      }, \"listVendia_ContractVersions\");\n    },\n    add(input, options) {\n      const variables = { ...options, input };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Contract);\n      }, \"addVendia_Contract\");\n    },\n    update(input, options) {\n      const { _id, ...rest } = input;\n      const variables = { ...options, id: _id, input: rest };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Contract);\n      }, \"updateVendia_Contract\");\n    },\n    invoke(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders).then((res) => res.invokeVendia_Contract_async);\n      }, \"invokeVendia_Contract_async\");\n    },\n    remove(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Contract);\n      }, \"removeVendia_Contract\");\n    }\n  };\n}\nfunction getFiles({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_File);\n      }, \"getVendia_File\");\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders).then((res) => {\n          var _a;\n          const updatedRes = { ...res.listVendia_FileItems, items: (_a = res.listVendia_FileItems) == null ? void 0 : _a.Vendia_FileItems };\n          delete updatedRes.Vendia_FileItems;\n          return updatedRes;\n        });\n      }, \"listVendia_FileItems\");\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FileVersions);\n      }, \"listVendia_FileVersions\");\n    },\n    add(input, options) {\n      const variables = { ...options, input };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_File);\n      }, \"addVendia_File\");\n    },\n    update(input, options) {\n      const { _id, ...rest } = input;\n      const variables = { ...options, id: _id, input: rest };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_File);\n      }, \"updateVendia_File\");\n    },\n    remove(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_File);\n      }, \"removeVendia_File\");\n    },\n    onAdd(handler) {\n      return _subscribe({ query: _files__onAddDocument }, ({ data }) => {\n        return handler(data.onAddVendia_File);\n      });\n    },\n    onRemove(handler) {\n      return _subscribe({ query: _files__onRemoveDocument }, ({ data }) => {\n        return handler(data.onRemoveVendia_File);\n      });\n    },\n    onUpdate(handler) {\n      return _subscribe({ query: _files__onUpdateDocument }, ({ data }) => {\n        return handler(data.onUpdateVendia_File);\n      });\n    }\n  };\n}\nfunction getFolders({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Folder);\n      }, \"getVendia_Folder\");\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders).then((res) => {\n          var _a;\n          const updatedRes = { ...res.listVendia_FolderItems, items: (_a = res.listVendia_FolderItems) == null ? void 0 : _a.Vendia_FolderItems };\n          delete updatedRes.Vendia_FolderItems;\n          return updatedRes;\n        });\n      }, \"listVendia_FolderItems\");\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FolderVersions);\n      }, \"listVendia_FolderVersions\");\n    },\n    add(input, options) {\n      const variables = { ...options, input };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Folder);\n      }, \"addVendia_Folder\");\n    },\n    remove(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Folder);\n      }, \"removeVendia_Folder\");\n    },\n    onAdd(handler) {\n      return _subscribe({ query: _folders__onAddDocument }, ({ data }) => {\n        return handler(data.onAddVendia_Folder);\n      });\n    },\n    onRemove(handler) {\n      return _subscribe({ query: _folders__onRemoveDocument }, ({ data }) => {\n        return handler(data.onRemoveVendia_Folder);\n      });\n    },\n    onUpdate(handler) {\n      return _subscribe({ query: _folders__onUpdateDocument }, ({ data }) => {\n        return handler(data.onUpdateVendia_Folder);\n      });\n    }\n  };\n}\nfunction getDeployments({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(id, options) {\n      const variables = { ...options, id };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_DeploymentInfo);\n      }, \"getVendia_DeploymentInfo\");\n    },\n    list(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders).then((res) => {\n          var _a;\n          const updatedRes = { ...res.listVendia_DeploymentInfoItems, items: (_a = res.listVendia_DeploymentInfoItems) == null ? void 0 : _a.Vendia_DeploymentInfoItems };\n          delete updatedRes.Vendia_DeploymentInfoItems;\n          return updatedRes;\n        });\n      }, \"listVendia_DeploymentInfoItems\");\n    }\n  };\n}\nfunction getSettings({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Settings);\n      }, \"getVendia_Settings\");\n    },\n    listVersions(options) {\n      const variables = options;\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_SettingsVersions);\n      }, \"listVendia_SettingsVersions\");\n    },\n    update(input, options) {\n      const variables = { ...options, input };\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Settings);\n      }, \"updateVendia_Settings\");\n    }\n  };\n}\nfunction getUniInfo({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {\n  return {\n    get() {\n      const variables = {};\n      return _requestWrapper((wrappedRequestHeaders) => {\n        return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_UniInfo);\n      }, \"getVendia_UniInfo\");\n    }\n  };\n}\n\n// node_modules/.vendia-client/index.ts\nvar createVendiaClient = (options) => {\n  const _logger = debug(\"@vendia/client\");\n  if (options.debug) {\n    _logger(\"Debug enabled via options\");\n    debug.enable(\"@vendia/client\");\n  }\n  const { _subscribe } = createSubscriptionClient(options, { _logger });\n  const { _gqlClient, _requestWrapper, request } = createCoreClient(options, { _logger });\n  const getSdkOptions = { _gqlClient, _requestWrapper, _subscribe };\n  const blocks = getBlocks(getSdkOptions);\n  const contracts = getContracts(getSdkOptions);\n  const deployments = getDeployments(getSdkOptions);\n  const entities = getEntities(getSdkOptions);\n  const uniInfo = getUniInfo(getSdkOptions);\n  const settings = getSettings(getSdkOptions);\n  const folders = getFolders(getSdkOptions);\n  const files = getFiles(getSdkOptions);\n  const storage = {\n    files,\n    folders\n  };\n  return {\n    request,\n    deployments,\n    blocks,\n    storage,\n    contracts,\n    uniInfo,\n    settings,\n    entities\n  };\n};\nexport {\n  createVendiaClient\n};\n"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBA;AAsBA,IAAIG,wCAAwC,GAAGH,GAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA,IAAII,oBAAoB,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA1BA;;AA2BA,IAAIK,qBAAqB,GAAGL,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA7BA;;AA8BA,IAAIM,sBAAsB,GAAGN,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,MAAMC,uCAAwC,EAN9C;;AAOA,IAAIM,yBAAyB,GAAGP,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,MAAMC,uCAAwC,EAN9C;;AAOA,IAAIO,yBAAyB,GAAGR,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,MAAMC,uCAAwC,EAN9C;;AAOA,IAAIQ,uBAAuB,GAAGT,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArDA;;AAsDA,IAAIU,wBAAwB,GAAGV,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxDA;;AAyDA,IAAIW,gCAAgC,GAAGX,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA,IAAIY,uBAAuB,GAAGZ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA9DA;;AA+DA,IAAIa,0BAA0B,GAAGb,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApEA;;AAqEA,IAAIc,0BAA0B,GAAGd,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbA;;AAcA,IAAIe,0BAA0B,GAAGf,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZA;;AAaA,IAAIgB,yBAAyB,GAAGhB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVA;;AAWA,IAAIiB,0BAA0B,GAAGjB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBA;;AAkBA,IAAIkB,mBAAmB,GAAGlB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBA;;AAqBA,IAAImB,oBAAoB,GAAGnB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAvBA;;AAwBA,IAAIoB,4BAA4B,GAAGpB,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA,IAAIqB,mBAAmB,GAAGrB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA7BA;;AA8BA,IAAIsB,sBAAsB,GAAGtB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlCA;;AAmCA,IAAIuB,sBAAsB,GAAGvB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZA;;AAaA,IAAIwB,qBAAqB,GAAGxB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAN7C;;AAOA,IAAIuB,wBAAwB,GAAGzB,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAN7C;;AAOA,IAAIwB,wBAAwB,GAAG1B,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA,MAAME,sCAAuC,EAN7C;;AAOA,IAAIyB,qBAAqB,GAAG3B,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAdA;;AAeA,IAAI4B,sBAAsB,GAAG5B,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBA;;AAkBA,IAAI6B,8BAA8B,GAAG7B,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA,IAAI8B,qBAAqB,GAAG9B,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAvBA;;AAwBA,IAAI+B,wBAAwB,GAAG/B,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZA;;AAaA,IAAIgC,uBAAuB,GAAGhC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAN/C;;AAOA,IAAI8B,0BAA0B,GAAGjC,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAN/C;;AAOA,IAAI+B,0BAA0B,GAAGlC,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,MAAMG,wCAAyC,EAN/C;;AAOA,IAAIgC,sBAAsB,GAAGnC,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnDA;;AAoDA,IAAIoC,+BAA+B,GAAGpC,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfA;;AAgBA,IAAIqC,yBAAyB,GAAGrC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3EA;;AA4EA,IAAIsC,qBAAqB,GAAGtC,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzCA;;AA0CA,IAAIuC,kBAAkB,GAAGvC,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATA;AAUA,IAAIwC,mBAAmB,GAAGxC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBA;AAmBA,IAAIyC,kBAAkB,GAAGzC,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module"}